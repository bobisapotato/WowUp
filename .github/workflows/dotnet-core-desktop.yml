# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    #branches: [ master ]
    tags: 
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        #configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: WowUp.sln                      # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path     # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: WowUp.WPF              # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: WowUp.WPF/WowUp.WPF.csproj  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      UPDATE_PROJECT_DIRECTORY: WowUp.Updater              # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      UPDATE_PROJECT_PATH: WowUp.Updater/WowUp.Updater.csproj
      APP_CHANGE_DESCRIPTION: ''
      APP_VERSION: ''

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    #- name: Execute unit tests
      #run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $env:Solution_Name
      #run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    #- name: Decode the pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: dotnet publish $env:Wap_Project_Path /p:PublishProfile=FolderProfile
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # # Build the updater package
    # - name: Create the updater app package
    #   run: dotnet publish $env:UPDATE_PROJECT_PATH /p:PublishProfile=FolderProfile
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}
        
    - name: Zip Build
      id: zip_build
      run: Compress-Archive -LiteralPath ${env:Wap_Project_Directory}/bin/Release/netcoreapp3.1/win-x64/publish/WowUp.exe -DestinationPath WowUp.zip
      
    - name: Test Build
      id: test_build
      run: dir ${env:Wap_Project_Directory}/bin/Release/netcoreapp3.1/win-x64/publish
    
    - name: Test Build2
      id: test_build2
      run: dir 
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
      
    - name: Upload Release Asset
      id: upload_release_asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./WowUp.zip
        asset_name: WowUp.zip
        asset_content_type: application/zip
        
    #- name: Test PS
    #  run: '$changelogJson = Get-Content ${env:Wap_Project_Directory}/Assets/changelog.json | ConvertFrom-Json; $env:APP_VERSION=$changelogJson[0].Version; $env:APP_CHANGE_DESCRIPTION=$changelogJson[0].Description'
    #  shell: pwsh

    #- name: Test Persist
    #  run: 'echo ${env:APP_VERSION}; echo ${env:APP_CHANGE_DESCRIPTION}'
    #  shell: pwsh
      
    # Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v2
    #  with:
     #   name: MSIX Package
      #  path: ${{ env.Wap_Project_Directory }}\AppPackages
